{"version":3,"sources":["pages/homepage/HomePage.js","pages/aboutpage/AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","id","width","React","Component","AboutPage","App","Fragment","className","Navbar","fixed","bg","Brand","href","Nav","Link","style","color","HomePage_HomePage","AboutPage_AboutPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAGqBA,0LAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACJH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,SAAP,mBAAmCH,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,MAAIE,MAAM,QACtDJ,EAAAC,EAAAC,cAAA,MAAIC,GAAG,YAAP,mFALsBE,IAAMC,YCAvBC,0LAEb,OACIP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAAR,uRAH2BE,IAAMC,YCwB9BE,EArBH,kBACVR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,QACrBb,EAAAC,EAAAC,cAACS,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,WAGAf,EAAAC,EAAAC,cAACc,EAAA,EAAIC,KAAL,CAAUF,KAAK,IAAIG,MAAO,CAACC,MAAM,UAAjC,QACAnB,EAAAC,EAAAC,cAACc,EAAA,EAAIC,KAAL,CAAUF,KAAK,IAAIG,MAAO,CAACC,MAAM,UAAjC,SACAnB,EAAAC,EAAAC,cAACc,EAAA,EAAIC,KAAL,CAAUF,KAAK,IAAIG,MAAO,CAACC,MAAM,UAAjC,UACAnB,EAAAC,EAAAC,cAACc,EAAA,EAAIC,KAAL,CAAUF,KAAK,IAAIG,MAAO,CAACC,MAAM,UAAjC,eAGJnB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACNH,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,UCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15ace3b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './homepage.css';\r\n\r\nexport default class HomePage extends React.Component{\r\n    render(){\r\n        return(\r\n            <div id=\"home\">\r\n                <h1 id=\"title\">Hi, I'm Rebecca</h1><br></br><hr width=\"50%\"></hr>\r\n                <h2 id=\"subtitle\">I'm a software engineer with a passion for digital art and UI/UX design</h2>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './aboutpage.css';\r\n\r\nexport default class AboutPage extends React.Component{\r\n    render(){\r\n        return(\r\n            <div id=\"about\">\r\n                I'm Rebecca Shi, and I'm currently a senior studying Computer Science \r\n                at New York University. I am passionate about coding, creating, and \r\n                learning. I love creating digital art, and I'm exploring UI/UX design. \r\n                You can see some of the stuff I've created in my portfolio.\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport HomePage from './pages/homepage/HomePage';\nimport AboutPage from './pages/aboutpage/AboutPage';\n\nconst App = () => (\n  <>\n    <div className=\"App\">\n      <div id=\"nav\">\n        <Navbar fixed=\"top\" bg=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            Rebecca\n          </Navbar.Brand>\n          <Nav.Link href=\"#\" style={{color:'white'}}>Home</Nav.Link>\n          <Nav.Link href=\"#\" style={{color:'white'}}>About</Nav.Link>\n          <Nav.Link href=\"#\" style={{color:'white'}}>Resume</Nav.Link>\n          <Nav.Link href=\"#\" style={{color:'white'}}>Portfolio</Nav.Link>\n        </Navbar>\n      </div>\n      <div id=\"pageWrapper\">\n        <HomePage />\n        <AboutPage />\n      </div>\n    </div>\n  </>\n)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}